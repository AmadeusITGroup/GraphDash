{
  "name": "GraphDash",
  "tagline": "A web-based dashboard built on graphs and their metadata",
  "body": "`GraphDash` is a web-based dashboard built on graphs and their metadata.\r\nFor example, if you have:\r\n\r\n```bash\r\n$ ls default_graph_dir\r\ngraph.svg\r\ngraph.txt\r\n```\r\n\r\nThe svg file is the graph, and must have metadata with YAML format:\r\n\r\n```bash\r\n$ cat default_graph_dir/graph.txt\r\nname: graph.svg\r\nfamily: Category 1\r\ntitle: '*Real serious* graph'\r\n```\r\n\r\nYou can put as many graphs as you want in the directory, then start the\r\ngraph dashboard. You will get a web interface with search box,\r\nautocompletion and easy navigation.\r\n\r\n```bash\r\n$ GraphDash -r default_graph_dir\r\n* Running on http://0.0.0.0:5555/ (Press CTRL+C to quit)\r\n```\r\n\r\n![](https://raw.githubusercontent.com/AmadeusITGroup/GraphDash/master/docs/example.gif)\r\n\r\nInstallation\r\n------------\r\n\r\nClone and install (in user space):\r\n\r\n```bash\r\ngit clone https://github.com/AmadeusITGroup/graphdash.git\r\ncd graphdash\r\npip install --user .\r\n```\r\n\r\nOr use the Python package:\r\n\r\n```bash\r\npip install --user graphdash\r\n```\r\n\r\nLaunch the webapp\r\n-----------------\r\n\r\nFor user-space installation, make sure your `$PATH` includes `~/.local/bin`.\r\n\r\n```bash\r\n$ GraphDash -r default_graph_dir\r\n* Running on http://0.0.0.0:5555/ (Press CTRL+C to quit)\r\n```\r\n\r\nThe dashboard can be configured with a YAML config file and the `-c/--conf` option:\r\n\r\n```bash\r\n$ cat docs/example.conf\r\nroot: ../default_graph_dir\r\ntitle: \"Example of title ;)\"\r\nsubtitle: \"Example of subtitle\"\r\n\r\n$ GraphDash -c docs/example.conf\r\n* Running on http://0.0.0.0:5555/ (Press CTRL+C to quit)\r\n```\r\n\r\nYou can generate a template of configuration file:\r\n\r\n```bash\r\n$ GraphDash -C template.conf\r\n```\r\n\r\nServe with Gunicorn\r\n-------------------\r\n\r\nIf not already installed on your machine, install `Gunicorn`:\r\n\r\n```bash\r\npip install --user gunicorn # on Fedora you may need to install libffi-devel before\r\n```\r\n\r\nSince you can import the webapp through `graphdash:app`, you can serve it with `Gunicorn`:\r\n\r\n```bash\r\ngunicorn -b 0.0.0.0:8888 --pid server.pid graphdash:app &\r\n```\r\n\r\nThe configuration file of the webapp can be set with the `CONF` environment variable.\r\nWith `Gunicorn`, you can pass environment variables to the workers with `--env`:\r\n\r\n```bash\r\ngunicorn -b 0.0.0.0:8888 --pid server.pid --env CONF=docs/example.conf graphdash:app &\r\n```\r\n\r\nBut you should *not* use these commands yourself, that is what `GraphDashManage` is for!\r\n\r\nGraphDashManage\r\n---------------\r\n\r\n`GraphDashManage` is used to `start`, `stop`, `restart` the\r\ninstances of `Gunicorn` serving `graphdash:app`. It needs a\r\nconfiguration file in the current directory:\r\n\r\n```bash\r\n$ cat settings.sh\r\nALL_MODES=(\r\n   ['prod']=\"docs/example.conf\"\r\n   ['test']=\"docs/example.conf\"\r\n)\r\n\r\nALL_PORTS=(\r\n   ['prod']=1234\r\n   ['test']=5678\r\n)\r\n```\r\n\r\nThen you can manage multiple instances of `GraphDash` using `Gunicorn` with:\r\n\r\n```bash\r\n$ GraphDashManage start prod\r\n[INFO] Listening at: http://0.0.0.0:1234\r\n[INFO] Booting worker with pid: 30403\r\n[INFO] Booting worker with pid: 30404\r\n[INFO] Booting worker with pid: 30405\r\n\r\n$ GraphDashManage start test\r\n[INFO] Listening at: http://0.0.0.0:5678\r\n...\r\n```\r\n\r\nYou can generate a template of settings:\r\n\r\n```bash\r\n$ GraphDashManage template > template.sh # to be moved to settings.sh\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}